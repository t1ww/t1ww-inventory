
//
	// so before we start this project all over again, let me tell the reason why im doing so //
//

REASON 1 : the readability of the module {

	basically inventory previous version (v1) was made with ds_grid
	with the index of [# item_info, index]
	item_info = [item_index, amount, "favourite(<<added>>)"];
	
	i followed cloaked games to make that inventory which is great and should be more lightweight
	than what i'm about to make, it's completely viable and good if you're not planning to adjust it
	
	however since it's getting more complexed with me trying to add the favourite feature,
	i soon realised it's much better to have written it in struct into ds_list ..
	well .. like this
```
	ds_list [| item_in_slot]
	item_in_slot = {
		item_index, 
		amount,
		favourite,
	}
```
	which would allow me to call it easier and readable
	
	ds_list[| selected_slot].item_index.use();
	ds_list[| selected_slot].amount--;
	ds_list[| selected_slot].favourite = true;
	etc ...
}

REASON 2 : the interaction code example {
	
	this one is completely my fault, so the interaction handling was
	an if nest hell
	which could be easily prevented with state machine..
	i have no idea why i didn't try to use it but anyways now i'm going to fix that.
	
	for the picture here's how my interaction was kinda like
	
	checked in area : init by obj_inventory,
	use by mouse inventory that was declared in globalvar inside cont_inventory
	
	mouseclick = function() {
		with mouse_inventory ???
		// 7 variables declared
		// 7 variables declared
		// 7 variables declared
		// 7 variables declared
		// 7 variables declared
		// 7 variables declared
		// 7 variables declared
		
		/// check for inv index on mouse
		// stop if mouse isnt on any inventory's slots or mouse has nothing
		try{
		} catch {}
		
		// check type limitation
		
		// moving item (this is whre real hell begins)
		// mouse is on a slot
		if (_index == -1) exit; ????
		/* 
		 grid 0,index = item
		 grid 1,index = amount
		*/ had to write this because it's not readable, you see why first reason was important
		if left_click {
			if l_shift {
				push item to container immediatly (havent write this)
			} else {
				// if mouse != slot
				if(grid[# 0, 0] != _active_inv.grid[# 0, _index]) { 
					// swap item
					var temp = 0;
					//swap item id
					temp = grid[# 0, 0];
					grid[# 0, 0] = _active_inv.grid[# 0, _index];
					_active_inv.grid[# 0, _index] = temp;
					//swap item amount
					temp = grid[# 1, 0];
					grid[# 1, 0] = _active_inv.grid[# 1, _index];
					_active_inv.grid[# 1, _index] = temp;					
					show_debug_message("swapped item from slot " + string(_index) + " with mouse");
				// if mouse == slot and not full
				}else if(grid[# 0, 0] == _active_inv.grid[# 0, _index] 
				and _active_inv.grid[# 1, _index] < global.stack_limit
				and grid[# 0, 0].stackable == true) { 
					// put all item in mouse into slot
					_active_inv.grid[# 1, _index] += grid[# 1, 0];
					// if over flow, buffer it down
					if _active_inv.grid[# 1, _index] > global.stack_limit {
						var a;
						a = _active_inv.grid[# 1, _index];
						grid[# 1, 0] = a - global.stack_limit; // set mouse amount to the remainings
						_active_inv.grid[# 1, _index] = global.stack_limit; // set slot amount to stack limit 
					}else clear();
					show_debug_message("added mouse's item to slot " + string(_index));
				}
			}
				r_click_end();
			}
		}
		
	--
		// oh my goodness end left click
		yk what
	--
		
		// right-click handling
		if (rightClick) {
			rClick_start();
			reset_timer();
			func_rclick();
		} // - end right click
		if (rightClickHolding && run_timer) {
			if rClick_timer <= 0 {
				func_rclick();
				rClick_timer_start *= .9;
				rClick_timer = rClick_timer_start;
			}
			rClick_timer--;
		} // - end holding rightclick
		if (rightClick_release) {
			rClick_end();
		}
		
		
		// right click function
		static func_rclick = function(){

			// ANOTHER 7 VARIABLES DECLARED

			#region// mouse check variables
				var leftClick,rightClick,rightClickHolding,rightClick_release,shift,alt,
					_active_inv,_index;
				// checking
				leftClick = mouse_check_button_pressed(mb_left);
				rightClick = mouse_check_button_pressed(mb_right);
				rightClickHolding = mouse_check_button(mb_right);
				rightClick_release = mouse_check_button_released(mb_right);
				shift = keyboard_check(vk_shift);
				alt = keyboard_check(vk_alt);
				_active_inv = mouse_inv.active_inv;
			#endregion
			// stop if mouse isnt on any inventory's slots or mouse has nothing
			try{
				_index = _active_inv.active_slot;
			} catch (_e) { 
				// mouse click not ready, do nothing
				exit;
			}
			if(_active_inv.grid[# 0, _index] == 0 and grid[# 0, 0] == 0) exit;
			//
			// if mouse empty or (has the same item and stackable)
			if	(grid[# 0, 0] == 0 
				or (grid[# 0, 0] == _active_inv.grid[# 0, _index] 
					and grid[# 0, 0].stackable == true)
				) 
			{
			// assigning mouse item
				if grid[# 0, 0] == 0 { grid[# 0, 0] = _active_inv.grid[# 0, _index] }
				// if holding shift pick half
				if shift {
					var _amt;
					_amt = ceil(_active_inv.grid[# 1, _index]/2);
					grid[# 0, 0] = _active_inv.grid[# 0, _index];
					grid[# 1, 0] += _amt;
					_active_inv.remove_item(_index,_amt);
				}else{ // not holding shift
				// take one
					grid[# 1, 0] ++;
					_active_inv.remove_item(_index,1);
				}
			}
		}
		
		// i gave up explaining just see how fU%@*( the code is ...
	}
}